name: Build
on:
  workflow_dispatch:
  workflow_call:
  pull_request:
    branches:
      - main
jobs:

  test:
    strategy:
      matrix:
        go-version: [1.24.x]
        os: [ubuntu-24.04]
        targetplatform: [x64]
        node-version: ['20.x', '21.x', '22.x', '23.x', '24.x']

    runs-on: ${{ matrix.os }}
    environment: production
    env:
      GOOS: js
      GOARCH: wasm
      GO111MODULE: on
    steps:

    - name: Install Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: false

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get dependencies
      working-directory: ./cmd
      run: |
        go vet ./...

    - name: Test
      run: |
        cd cmd
        GOOS=js GOARCH=wasm GO111MODULE=on go test -exec="$(go env GOROOT)/lib/wasm/go_js_wasm_exec" -v ./... -coverprofile="coverage.txt" -covermode=atomic

    - name: Codecov
      uses: codecov/codecov-action@v5
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        directory: ./cmd
        files: coverage.txt
        flags: unittests
        name: codecov-umbrella

    - name: Build WASM
      run: |
        cd cmd
        GOOS=js GOARCH=wasm GO111MODULE=on CGO_ENABLED=0 go build -v -a -ldflags="-w -s" -gcflags=-trimpath="$(go env GOPATH)" -asmflags=-trimpath="$(go env GOPATH)" -o ../dist/excelize.wasm main.go
        gzip -f --best ../dist/excelize.wasm

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: NPM Build
      run: |
        npm install
        node ./node_modules/.bin/rollup -c
        cp LICENSE ./dist
        cp README.md ./dist
        cp package.json ./dist
        cp src/index.d.ts ./dist
